isPassengerData <- function(df) {
  # Check if df is a data frame
  if (!is.data.frame(df)) {
    return(FALSE)
  }
  
  # Check if columns are matching
  required_columns <- c("port", "citizenship", "count", "year")
  if (!all(required_columns %in% colnames(df))) {
    return(FALSE)
  }
  
  # Check if port column is character
  if (!is.character(df$port)) {
    return(FALSE)
  }
  
  # Check if year column is numeric
  if (!is.numeric(df$year)) {
    return(FALSE)
  }
  
  # Check if citizenship column is character
  if (!is.character(df$citizenship)) {
    return(FALSE)
  }
  
  # Check if count column is numeric
  if (!is.numeric(df$count)) {
    return(FALSE)
  }
  
  # If all pass, return TRUE
  return(TRUE)
}

###---------------------------------Purpose--------------------------------
###-Filter data base on requested port and year, excluding aggregated data-
###------------------------------------------------------------------------

###-------------------------------Return------------------------------
###-A dataframe with "citizenship" and "count" for the requested year-
###------Empty data frame if port not exist or year out of range------
###-------------------------------------------------------------------

###----------------------------Assumption-----------------------------
###-------"passenger-counts.csv" is read and named as "passengers"----
###-----------"passengers" is a globally available data frame---------
###-----------inputs are in the format (port_name, year_value)--------
###-------------------------------------------------------------------

###---------------------------limitation----------------------------------
###-cannot handle cases where the "passengers" is not available globally--
###-----------------------------------------------------------------------

getPortYear <- function(port_name, year_value, data = passengers) {
  # Check if the data frame has the correct format
    if (!isPassengerData(data)) {
    stop("Invalid data frame format!")
  }
  # Check if inputs are valid
  # Check whether port_name is a string, if not return warning
  if (!is.character(port_name) || length(port_name) != 1) {
    stop("Invalid input! port must be a string .")
  }
  
  # Check whether year_value is a string, if not return warning
  if (!is.numeric(year_value) || length(year_value) != 1) {
    stop("Invalid input! year must be a numeric value.")
  }
  
  # Check if the port and year exists in the data
  if (!port_name %in% data$port | !year_value %in% data$year){
    # If the port does not exist, return an empty data frame
    empty_df <- data.frame(citizenship = character(0), year = integer(0))
    return(empty_df)
  }
  
  # Filter for the inputted port and year
  # Always exclude Total
  result <- subset(data, port == port_name & year == year_value & citizenship != "Total")

  # Select citizenship and count
  result <- result[, c("citizenship", "count")]
  
  # Rename the count column to inputted year
  colnames(result)[2] <- as.character(year_value)
  
  # Return
  return(result)
}
